dataset,models,projected_tables,completion_tables,tf_removals,tf_keep_rates,tuple_removal_table,tuple_removal_keep_rate,removal_method,removal_attr,removal_attr_values,removal_attr_bias,seed,cascading_deletes,model_families,training_times,query_plan,execution_time,evaluation,fully_synthetic,model_selection_strategy,validation_tuple_removal_keep_rate,validation_removal_attr_bias,validation_tf_keep_rate,not_synthetic,ann_batch_size,ann_neighbors_considered,completable_tables,fixed_completion_path,execution_stats,top_path_union_strategy,prefer_baseline,code_comment,evaluation_method
airbnb,['ar_ep20'],"['neighborhoods', 'hosts', 'listings']","['listings', 'neighborhoods']","['neighborhoods.tf_listings.neighborhood_id', 'hosts.tf_listings.host_id']","[0.3, 0.3]",['listings'],[0.6],['categorical_prob_bias'],['listings.property_type'],['3'],[0.8],0,True,"['FlatARModel(relations=hosts-listings,neighborhoods-listings)\n\tCompletionSetup(hosts->listings)\n\tCompletionSetup(listings->neighborhoods, evidence=hosts-listings)_FlatARModel(relations=hosts-listings,neighborhoods-listings)\n\tCompletionSetup(hosts->listings)\n\tCompletionSetup(listings->neighborhoods, evidence=hosts-listings)_FlatARModel(relations=neighborhoods-listings)\n\tCompletionSetup(neighborhoods->listings)']","[[264.32723317699856, 84.00720550399274]]","TopPathUnion(combine,LoadCompleteTable(hosts),JoinRelationship(hosts-listings, inverse=False, model=autoregressive896882b049d87933c0344201a64ac13319bbdd0b90bfb7da130ef612),JoinRelationship(neighborhoods-listings, inverse=True, model=autoregressive896882b049d87933c0344201a64ac13319bbdd0b90bfb7da130ef612),ApproximateNearestNeighbor(batch_size=1000, neighbors_considered=10000, r=hosts-listings, replace_join_relationships=neighborhoods-listings),ApproximateNearestNeighbor(batch_size=1000, neighbors_considered=10000, r=neighborhoods-listings, replace_join_relationships=),ProjectRequestedJoin(all_r=hosts-listings,neighborhoods-listings, tables=neighborhoods,listings))",6.931634865992237,"[(False, <RemovalMethod.CATEGORICAL_PROB_BIAS: 'categorical_prob_bias'>, 'listings.property_type', [(6, ([(1.0, 2202.0), (2.0, 3724.0), (4.0, 1267.0), (5.0, 1178.0), (6.0, 656.0), (7.0, 1627.0), (8.0, 350.0), (9.0, 376.0), (10.0, 141.0), (11.0, 215.0), (36.0, 4171.0), (37.0, 706.0), (38.0, 341.0), (39.0, 671.0), (40.0, 220.0), (41.0, 374.0), (42.0, 614.0), (48.0, 494.0), (49.0, 115.0), (50.0, 149.0), (51.0, 334.0), (52.0, 273.0), (53.0, 125.0), (54.0, 67.0), (55.0, 233.0), (56.0, 41.0), (57.0, 19.0), (58.0, 64.0), (59.0, 50.0), (60.0, 115.0), (61.0, 71.0)], None), ([(1.0, 1900.0), (2.0, 3022.0), (4.0, 1140.0), (5.0, 993.0), (6.0, 413.0), (7.0, 965.0), (8.0, 211.0), (9.0, 327.0), (10.0, 105.0), (11.0, 166.0), (36.0, 3658.0), (37.0, 459.0), (38.0, 261.0), (39.0, 504.0), (40.0, 191.0), (41.0, 275.0), (42.0, 522.0), (48.0, 260.0), (49.0, 100.0), (50.0, 121.0), (51.0, 222.0), (52.0, 182.0), (53.0, 102.0), (54.0, 47.0), (55.0, 213.0), (56.0, 29.0), (57.0, 17.0), (58.0, 56.0), (59.0, 46.0), (60.0, 80.0), (61.0, 41.0)], None), ([(1.0, 3695.0), (2.0, 5752.0), (4.0, 2134.0), (5.0, 1881.0), (6.0, 768.0), (7.0, 1766.0), (8.0, 364.0), (9.0, 574.0), (10.0, 209.0), (11.0, 295.0), (36.0, 6780.0), (37.0, 793.0), (38.0, 439.0), (39.0, 960.0), (40.0, 361.0), (41.0, 464.0), (42.0, 883.0), (48.0, 449.0), (49.0, 170.0), (50.0, 222.0), (51.0, 379.0), (52.0, 309.0), (53.0, 186.0), (54.0, 83.0), (55.0, 358.0), (56.0, 46.0), (57.0, 34.0), (58.0, 118.0), (59.0, 80.0), (60.0, 145.0), (61.0, 74.0)], None)), (7, (33451.0, None), (26604.0, None), (45629.0, None)), (8, ([(1.0, 20847.0), (2.0, 55077.0), (3.0, 5876.0), (4.0, 2227.0), (5.0, 2220.0), (6.0, 5682.0), (7.0, 8459.0), (8.0, 584.0), (9.0, 14624.0), (10.0, 1882.0), (11.0, 20228.0), (12.0, 1892.0), (13.0, 17.0), (14.0, 17400.0), (15.0, 10202.0), (16.0, 2575.0), (17.0, 17521.0), (18.0, 1.0), (22.0, 1.0), (23.0, 1.0)], None), ([(1.0, 16505.0), (2.0, 43430.0), (3.0, 3894.0), (4.0, 1834.0), (5.0, 1820.0), (6.0, 3814.0), (7.0, 6366.0), (8.0, 473.0), (9.0, 14342.0), (10.0, 1814.0), (11.0, 15475.0), (12.0, 1495.0), (13.0, 10.0), (14.0, 11663.0), (15.0, 8351.0), (16.0, 2223.0), (17.0, 12405.0), (23.0, 1.0)], None), ([(1.0, 27336.0), (2.0, 65371.0), (3.0, 6610.0), (4.0, 3176.0), (5.0, 3341.0), (6.0, 7073.0), (7.0, 11414.0), (8.0, 886.0), (9.0, 26856.0), (10.0, 2780.0), (11.0, 25722.0), (12.0, 2765.0), (13.0, 18.0), (14.0, 21474.0), (15.0, 13579.0), (16.0, 4230.0), (17.0, 18272.0), (18.0, 2.0), (23.0, 1.0)], None))]), (True, <RemovalMethod.CATEGORICAL_PROB_BIAS: 'categorical_prob_bias'>, 'listings.property_type', [(6, ([(1.0, 2202.0), (2.0, 3724.0), (4.0, 1267.0), (5.0, 1178.0), (6.0, 656.0), (7.0, 1627.0), (8.0, 350.0), (9.0, 376.0), (10.0, 141.0), (11.0, 215.0), (36.0, 4171.0), (37.0, 706.0), (38.0, 341.0), (39.0, 671.0), (40.0, 220.0), (41.0, 374.0), (42.0, 614.0), (48.0, 494.0), (49.0, 115.0), (50.0, 149.0), (51.0, 334.0), (52.0, 273.0), (53.0, 125.0), (54.0, 67.0), (55.0, 233.0), (56.0, 41.0), (57.0, 19.0), (58.0, 64.0), (59.0, 50.0), (60.0, 115.0), (61.0, 71.0)], None), ([(1.0, 1900.0), (2.0, 3022.0), (4.0, 1140.0), (5.0, 993.0), (6.0, 413.0), (7.0, 965.0), (8.0, 211.0), (9.0, 327.0), (10.0, 105.0), (11.0, 166.0), (36.0, 3658.0), (37.0, 459.0), (38.0, 261.0), (39.0, 504.0), (40.0, 191.0), (41.0, 275.0), (42.0, 522.0), (48.0, 260.0), (49.0, 100.0), (50.0, 121.0), (51.0, 222.0), (52.0, 182.0), (53.0, 102.0), (54.0, 47.0), (55.0, 213.0), (56.0, 29.0), (57.0, 17.0), (58.0, 56.0), (59.0, 46.0), (60.0, 80.0), (61.0, 41.0)], None), ([(1.0, 3695.0), (2.0, 5752.0), (4.0, 2134.0), (5.0, 1881.0), (6.0, 768.0), (7.0, 1766.0), (8.0, 364.0), (9.0, 574.0), (10.0, 209.0), (11.0, 295.0), (36.0, 6780.0), (37.0, 793.0), (38.0, 439.0), (39.0, 960.0), (40.0, 361.0), (41.0, 464.0), (42.0, 883.0), (48.0, 449.0), (49.0, 170.0), (50.0, 222.0), (51.0, 379.0), (52.0, 309.0), (53.0, 186.0), (54.0, 83.0), (55.0, 358.0), (56.0, 46.0), (57.0, 34.0), (58.0, 118.0), (59.0, 80.0), (60.0, 145.0), (61.0, 74.0)], None)), (7, (33451.0, None), (26604.0, None), (45629.0, None)), (8, ([(1.0, 20847.0), (2.0, 55077.0), (3.0, 5876.0), (4.0, 2227.0), (5.0, 2220.0), (6.0, 5682.0), (7.0, 8459.0), (8.0, 584.0), (9.0, 14624.0), (10.0, 1882.0), (11.0, 20228.0), (12.0, 1892.0), (13.0, 17.0), (14.0, 17400.0), (15.0, 10202.0), (16.0, 2575.0), (17.0, 17521.0), (18.0, 1.0), (22.0, 1.0), (23.0, 1.0)], None), ([(1.0, 16505.0), (2.0, 43430.0), (3.0, 3894.0), (4.0, 1834.0), (5.0, 1820.0), (6.0, 3814.0), (7.0, 6366.0), (8.0, 473.0), (9.0, 14342.0), (10.0, 1814.0), (11.0, 15475.0), (12.0, 1495.0), (13.0, 10.0), (14.0, 11663.0), (15.0, 8351.0), (16.0, 2223.0), (17.0, 12405.0), (23.0, 1.0)], None), ([(1.0, 27336.0), (2.0, 65371.0), (3.0, 6610.0), (4.0, 3176.0), (5.0, 3341.0), (6.0, 7073.0), (7.0, 11414.0), (8.0, 886.0), (9.0, 26856.0), (10.0, 2780.0), (11.0, 25722.0), (12.0, 2765.0), (13.0, 18.0), (14.0, 21474.0), (15.0, 13579.0), (16.0, 4230.0), (17.0, 18272.0), (18.0, 2.0), (23.0, 1.0)], None))])]",False,none,[0.4],[0.4],1.0,True,1000,10000,"['listings', 'neighborhoods']","['hosts', 'listings']","[[{}, {'output_tuples': 363775, 'input_tuples': 363133, 'elapsed_time': 3.2203863689792342, 'step': 'JoinRelationship(hosts-listings, inverse=False, model=autoregressive896882b049d87933c0344201a64ac13319bbdd0b90bfb7da130ef612)'}, {'output_tuples': 363668, 'input_tuples': 363775, 'elapsed_time': 1.4400880319881253, 'step': 'JoinRelationship(neighborhoods-listings, inverse=True, model=autoregressive896882b049d87933c0344201a64ac13319bbdd0b90bfb7da130ef612)'}, {'replaced_tuples': 0, 'input_tuples': 0, 'elapsed_time': 0, 'step': 'ApproximateNearestNeighbor(batch_size=1000, neighbors_considered=10000, r=hosts-listings, replace_join_relationships=neighborhoods-listings)'}, {'replaced_tuples': 62399.0, 'input_tuples': 363668, 'elapsed_time': 2.2468172690132633, 'step': 'ApproximateNearestNeighbor(batch_size=1000, neighbors_considered=10000, r=neighborhoods-listings, replace_join_relationships=)'}, {'fan_out_tuple_factors': [], 'input_tuples': 363668, 'elapsed_time': 0.021021392021793872, 'step': 'ProjectRequestedJoin(all_r=hosts-listings,neighborhoods-listings, tables=neighborhoods,listings)'}]]",combine,False,Now numba discretizing & efficient ANN (no repeat),aqp
